//
//  Colors.swift
//
//  Created by Adel Radwan
//
{% if catalogs %}
{% set enumName %}{{param.enumName|default:"AppColor"}}{% endset %}
import UIKit
{% macro enumBlock assets %}
{% call casesBlock assets %}
{% if param.allValues %}
{% if resourceCount.color > 0 %}
{{accessModifier}} static let allColors: [{{colorType}}] = [
{% filter indent:2 %}{% call allValuesBlock assets "color" "" %}{% endfilter %}
]
{% endif %}
{% endif %}
{% endmacro %}
{% macro casesBlock assets %}
{% for asset in assets %}
  {{accessModifier}} case {{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords|replace: "app", ""|lowerFirstWord}} 
{% endfor %}
  {{accessModifier}} case clear
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
{% for asset in assets %}
{% if asset.type == filter %}
{{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
{% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
{% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
{% call allValuesBlock asset.items filter prefix2 %}
{% elif asset.items %}
{% call allValuesBlock asset.items filter prefix %}
{% endif %}
{% endfor %}
{% endmacro %}

{{accessModifier}}@objc public enum {{enumName}}: Int {

 {{accessModifier}} public var rawValue: Int { return 1 }

{% if catalogs.count > 1 or param.forceFileNameEnum %}
{% call enumBlock catalogs.first.assets %}
{% endif %}

}

{{accessModifier}} extension {{enumName}} {
{% macro enumValueBlock assets %}
  {% call casesBlock assets %}
  {% if param.allValues %}
  {% if resourceCount.color > 0 %}
        {{accessModifier}} static let allColors: [{{colorType}}] = [
            {% filter indent:2 %}{% call allValuesBlock assets "color" "" %}{% endfilter %}
  ]
  {% endif %}
  {% endif %}
{% endmacro %}
{% macro casesBlock assets %}
  {% for asset in assets %}
        {{accessModifier}} case .{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords|replace: "app", ""|lowerFirstWord}}:
            return UIColor(named: "{{asset.value}}")!.withAlphaComponent(alpha)
  {% endfor %}
        {{accessModifier}} case .clear:
            return UIColor.clear
{% endmacro %}
{% macro allValuesBlock assets filter prefix %}
  {% for asset in assets %}
  {% if asset.type == filter %}
  {{prefix}}{{asset.name|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}},
  {% elif asset.items and ( forceNamespaces == "true" or asset.isNamespaced == "true" ) %}
  {% set prefix2 %}{{prefix}}{{asset.name|swiftIdentifier:"pretty"|escapeReservedKeywords}}.{% endset %}
  {% call allValuesBlock asset.items filter prefix2 %}
  {% elif asset.items %}
  {% call allValuesBlock asset.items filter prefix %}
  {% endif %}
  {% endfor %}
{% endmacro %}


  {{accessModifier}} var value: UIColor {
        get {
            return value(alpha: 1)
        }
    }

  {{accessModifier}}func value(alpha: CGFloat = 1)-> UIColor {
    switch self {
        {% call enumValueBlock catalogs.first.assets %}
    }
  }
  

}
{% endif %}
